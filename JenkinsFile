pipeline {
    agent any

    tools {
        nodejs 'Node'
    }

    environment {
        DOCKER_IMAGE = 'node-server:latest'
        AWS_CREDENTIALS_ID = 'aws-credentials-id' 
        EC2_INSTANCE_IP = '35.175.152.235'
        S3_BUCKET_NAME = 'my-jenkins-backup-bucket'
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REPO = 'papi09/node-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub-reg'

 
    }

    stages {        
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                git branch: 'develop', url: 'https://github.com/Sarfo-Anokye/first-deployment'
            }
        }

         stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Test Code') {
            steps {
                echo 'Running tests...'
                sh 'npm run test' 
            }
        }

          stage('SonarQube analysis') {
            environment {
                SCANNER_HOME = tool 'SonarQubeScanner';    
            }
            
            steps {
                
                withSonarQubeEnv('SonarQube') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner"
                }
            }
        }

        stage('Check Quality Gate') {
            steps {
                script {
                    def quality-gate = waitForQualityGate()
                    if (quality.status != 'OK') {
                        error "Pipeline failed due to SonarQube Quality Gate status: ${qg.status}"
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                echo 'Pushing Docker image to registry...'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-reg', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    # Login to Docker registry
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    # Tag the image with the repository name
                    docker tag $DOCKER_IMAGE $DOCKER_REGISTRY/$DOCKER_REPO:latest
                    # Push the image to Docker Hub
                    docker push $DOCKER_REGISTRY/$DOCKER_REPO:latest
                    '''
                }
            }
        }


         stage('Deploy to EC2') {
            steps {
                echo 'Deploying application to EC2...'
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                        ssh -o StrictHostKeyChecking=no -i \$SSH_KEY ubuntu@\${EC2_INSTANCE_IP} "
                            # Pull the image from Docker Hub
                            sudo docker pull \$DOCKER_REPO:latest
                            
                            # Check if the container exists, stop and remove it if it does
                            if sudo docker ps -a --format '{{.Names}}' | grep -q 'my-application'; then
                                echo 'Stopping and removing existing container...'
                                sudo docker stop my-application || true
                                sudo docker rm my-application || true
                            else
                                echo 'No existing container found to stop/remove.'
                            fi
                            
                            # Run the container
                            sudo docker run -d --name my-application -p 8000:5000 \$DOCKER_REPO:latest
                        "
                    """


                }
            }
        }


        stage('Cleanup') {
            steps {
                echo 'Cleaning up Docker images...'
                sh '''
                # Remove  Docker images on Jenkins
                docker image prune -f
                '''
            }
        }


        
    }
    post {
            success {
                echo 'Pipeline completed successfully.'
            }
            failure {
                echo 'Pipeline failed.'
            }
        }
}