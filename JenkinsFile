pipeline {
    agent any

    tools {
        nodejs 'Node'
    }

    environment {
        // Set environment variables like Docker image name and S3 bucket for backup
        DOCKER_IMAGE = 'node-server:latest'
        AWS_CREDENTIALS_ID = 'aws-credentials-id'  // Jenkins AWS credentials ID
        EC2_INSTANCE_IP = 'ec2-instance-ip'
        S3_BUCKET_NAME = 'my-jenkins-backup-bucket'
        DOCKER_REGISTRY = 'docker.io' // Docker Hub (change this if using another registry)
        DOCKER_REPO = 'papi09/node-app' // Docker Hub username/repo (change to your repo)
        DOCKER_CREDENTIALS_ID = 'docker-hub-reg' // Docker credentials in Jenkins
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Checking out code...'
                git branch: 'develop', url: 'https://github.com/Sarfo-Anokye/first-deployment'
            }
        }

         stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Test Code') {
            steps {
                echo 'Running tests...'
                sh 'npm run test' 
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                sh 'docker build -t $DOCKER_IMAGE .'
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                echo 'Pushing Docker image to registry...'
                withCredentials([usernamePassword(credentialsId: 'docker-hub-reg', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    # Login to Docker registry
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    # Tag the image with the repository name
                    docker tag $DOCKER_IMAGE $DOCKER_REGISTRY/$DOCKER_REPO:latest
                    # Push the image to Docker Hub
                    docker push $DOCKER_REGISTRY/$DOCKER_REPO:latest
                    '''
                }
            }
        }


        stage('Deploy to EC2') {
            steps {
                echo 'Deploying application to EC2...'
                withCredentials([sshUserPrivateKey(credentialsId: 'ec2-ssh-key', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                    scp -i $SSH_KEY Dockerfile ec2-user@$EC2_INSTANCE_IP:/home/ec2-user/
                    ssh -i $SSH_KEY ec2-user@$EC2_INSTANCE_IP << EOF
                        docker stop my-application || true
                        docker rm my-application || true
                        docker run -d --name my-application -p 8080:5000 $DOCKER_IMAGE
                    EOF
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully.'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
